MIDTRANS | midtrans.com    
    Midtrans Merupakan third party yang bermanfaat untuk melakukkan handle payment atau pembayaran.
    Adapun untuk mitran sendiri terdapat 2 mode production & sandbox || production digunakan saat 
    project sudah dalam kondisi production sedangkan sanbox digunakan jika program masih divase development.


    Penggunaan  : 
        1. Kita memerlukan mitran client id dan mitran server key :
            goto -> setting -> access key -> copy 2 hal tersebut
            * Karena client key akan kita akses dalam mode client ("use client") maka penamaan variabel .env nya disertakan NEXT_PUBLIC 
              ini adalah prefix dari nextjs. !khusus di .env yang diakses via client.

        2. Buat API untuk melakukkan handle generate token dan untuk menampilkan snap dari midtrans :
            example : app/api/payment/route.ts 
            * Disini kita membutuhkan nextResponse dan juga library midtrans clien oleh karena itu install - npm i midtrans-client -
              saat melakukkan import package mitrans akan muncul masalah hal ini dikarenakan midtrans belum support terhadap typescript

              SOLUSI :
              Kita bisa declare module nya secara mandiri seperti ini : 
                @/type/midtrans-client.d.ts :
                    declare module "midtrans-client";
                
                Maka error akan teratasi.
            
                full isi app/api/payment/route.ts: 
                    import { NextResponse } from "next/server";
                    import Midtrans from "midtrans-client";
                    import { ReservationProps } from "@/types/reservation";

                    const snap = new Midtrans.Snap({
                        isProduction: false, // karena kita masih sanbox maka buat ke false
                        serverKey: process.env.MIDTRANS_SERVER_KEY,
                        clientKey: process.env.NEXT_PUBLIC_MIDTRANS_CLIENT_KEY
                    })

                    export const POST = async(request: Request) => {
                        const reservation: ReservationProps = await request.json();

                        const parameter = {
                            transaction_details: {
                                order_id: reservation.id,
                                gross_amount: reservation.Payment?.amount || 0,
                            }, 
                            credit_card: {  
                                secure: true
                            },
                            customer_details: {
                                first_name: reservation.user.name,
                                email: reservation.user.email
                            }
                        }

                        const token = await snap.createTransactionToken(parameter);
                        return NextResponse.json(token);
                    }
        
        3. Buat component untuk melakukkan hit API nya misal PaymentButton : 
            Karena ccomponent ini butuh hasil fetch data reservation maka dia kita jadikan kompoenen agar bisa menerima props reservation 
                *   Didalam PaymentButton kita menggunakan useTransition dan juga ReservationProps 
                    Jadi button ini saat dia di klik maka dia akan menjalankan function handlePayment karena kita memakain state useTransition
                    maka kita buat menjadi "use client" 
                *   Didalam function handlePayment kita gunakan useTransition dan didalam cb useTransition baru kita melakukkan try catch 
                    yang akan melakukkan hit/fetch ke route api/payment dengan method post dan body json.stringify(reservation) yang
                    merupakan props tadi.
                *   Buat variabel destructuring dari variabel fetch yang dimana kita ambil token contoh : const {token} = await res.json()
                *   Buat kondisi handle jika token nya ada maka kita akan menampilkan snap nya ke window bagian pay yang dimana pay ini memerlukan
                    token 
                *   Karena window.pay bakalan tidak dikenali efek midtrans tidak suport ts maka kita melakukkan declare global mandiri yang didalamnya
                    kita membuat interface Window dan didalam window terdapat snap yang snap ini mempunyai pay yang didalam pay ini 
                    ada (token: bertipeString) dengan default value void ( => void)

                </> FULL CODE : 
                        "use client";

                        import { useTransition } from "react";
                        import { ReservationProps } from "@/types/reservation";

                        declare global {
                            interface Window {
                                    snap: {
                                    pay: (token: string) => void;
                                };
                            }
                        }

                        const PaymentButton = ({ reservation }: { reservation: ReservationProps }) => {
                        const [isPending, startTransition] = useTransition();

                        const handlePayment = async () => {
                            startTransition(async () => {
                                try {
                                    const responseAPI = await fetch("/api/payment", {
                                        method: "POST",
                                        body: JSON.stringify(reservation),
                                    });

                                    const { token } = await responseAPI.json();
                                    if (token) {
                                        window.snap.pay(token); // masalah karena belum sup ts: solusi dideclare di atas
                                    }
                                } catch (error) {
                                    console.log(error);
                                }
                            });
                        };

                            return (
                                <button
                                className="px-10 py-4 mt-2 text-center font-semibold text-white w-full bg-orange-400 rounded-sm hover:bg-orange-500 cursor-pointer"
                                onClick={handlePayment}
                                >
                                Process Payment
                                </button>
                            );
                        };

                        export default PaymentButton;
  
